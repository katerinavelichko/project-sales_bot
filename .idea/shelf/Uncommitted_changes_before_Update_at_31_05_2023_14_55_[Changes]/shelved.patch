Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import telebot\r\nfrom telebot import types\r\nfrom telebot.types import BotCommand\r\nimport sqlite3\r\nimport json\r\n\r\nbot = telebot.TeleBot('5844570225:AAHVbCClhE53DdtM-RpZ1vKjrPPB4j_I538', 'markdown')\r\ncon = sqlite3.connect(\"server.db\", check_same_thread=False)\r\ncur = con.cursor()\r\nconn = sqlite3.connect('users.db', check_same_thread=False)\r\ncursor = conn.cursor()\r\n\r\n\r\ndef set_main_menu():\r\n    main_menu_commands = [\r\n        BotCommand(command='/start',\r\n                   description='Запуск бота'),\r\n        BotCommand(command='/help',\r\n                   description='Помощь'),\r\n        BotCommand(command='/addtest',\r\n                   description='Добавить тест'),\r\n        BotCommand(command='/choosetestb2b',\r\n                   description='Выбрать тест b2b'),\r\n        BotCommand(command='/choosetestb2c',\r\n                   description='Выбрать тест b2c'),\r\n        BotCommand(command='/show_statistic',\r\n                   description='Просмотр статистики')\r\n    ]\r\n\r\n    bot.set_my_commands(main_menu_commands)\r\n\r\n\r\ndef db_table_val1(user_id: int, user_name: str, user_status: str, username: str):\r\n    cursor.execute('INSERT INTO users (user_id, user_name, user_status, username) VALUES (?, ?, ?, ?)',\r\n                   (user_id, user_name, user_status, username))\r\n    conn.commit()\r\n\r\n\r\ndef db_table_val2(user_id: int, user_status: str, user_boss: str):\r\n    cursor.execute('INSERT INTO boss_to_users (user_id, user_status, user_boss) VALUES (?, ?, ?)',\r\n                   (user_id, user_status, user_boss))\r\n    conn.commit()\r\n\r\n\r\ntest_id = 2\r\nb2b_or_b2c = 0\r\ntest = 0\r\nquestion_number = 1\r\ncorrect_option = -1\r\nresult = 0\r\nlevel = 0\r\n\r\n\r\n@bot.message_handler(content_types=['text'])\r\ndef get_text_messages(message, massege=None):\r\n    global test_id, b2b_or_b2c, test_id, question_number, correct_option, test, result, level\r\n    sms2 = 'Вы можете выбрать один из 4 типов клиентов: '\r\n    if message.text == \"/start\":\r\n        test_id = 2\r\n        b2b_or_b2c = 0\r\n        test = 0\r\n        question_number = 1\r\n        correct_option = -1\r\n        result = 0\r\n        keyboard = types.InlineKeyboardMarkup()\r\n        key_manager = types.InlineKeyboardButton(text='Менеджер', callback_data=\"manager\")\r\n        keyboard.add(key_manager)\r\n        key_boss = types.InlineKeyboardButton(text='Управляющий', callback_data=\"boss\")\r\n        keyboard.add(key_boss)\r\n        bot.send_message(message.from_user.id, 'Выберите вашу роль', reply_markup=keyboard)\r\n    elif message.text == \"/help\":\r\n        bot.send_message(message.from_user.id, \"Напишите /start\")\r\n    elif message.text == \"/show_statistic\":\r\n        murkup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n        webAppTest = types.WebAppInfo(\"https://anyashishkina.github.io/test_repository/\")\r\n        murkup.add(types.InlineKeyboardButton('Посмотреть статистику', web_app=webAppTest))\r\n        bot.send_message(message.chat.id, 'Статистика!', reply_markup=murkup)\r\n    elif message.text == \"Привет\":\r\n        bot.send_message(message.from_user.id, \"Здравствуйте! Напишите /help\")\r\n    elif message.text.lower() == 'добавить тест' or message.text.lower() == '/addtest':\r\n        send = bot.send_message(message.chat.id,\r\n                                'Создайте пароль для доступа к вашему тесту, он может состоять только цифр')\r\n        bot.register_next_step_handler(send, ask_key_word)\r\n    elif message.text == '/choosetestb2b':\r\n        if str(test)[0] == \"2\":\r\n            bot.send_message(message.chat.id,\r\n                             'Вы проходили входной тест для B2C, поэтому можете выбрать тест только из этой категории. Нажмите \"Выбрать тест b2c\"')\r\n        else:\r\n            test = 1000\r\n            test += level\r\n            question_number = 1\r\n            keyboard = types.InlineKeyboardMarkup()\r\n            key_loyal = types.InlineKeyboardButton(text='Лояльный', callback_data='loyal_client')\r\n            key_new = types.InlineKeyboardButton(text='Новый', callback_data='new_client')\r\n            key_negative = types.InlineKeyboardButton(text='Негативный', callback_data='negative_client')\r\n            key_doubting = types.InlineKeyboardButton(text='Сомневающийся', callback_data='doubting_client')\r\n            keyboard.add(key_loyal)\r\n            keyboard.add(key_new)\r\n            keyboard.add(key_negative)\r\n            keyboard.add(key_doubting)\r\n            bot.send_message(message.from_user.id, 'Выберите тип клиента', reply_markup=keyboard)\r\n    elif message.text == '/choosetestb2c':\r\n        if str(test)[0] == \"1\":\r\n            bot.send_message(message.chat.id,\r\n                             'Вы проходили входной тест для B2B, поэтому можете выбрать тест только из этой категории. Нажмите \"Выбрать тест b2b\"')\r\n        else:\r\n            test = 2000\r\n            test += level\r\n            question_number = 1\r\n            keyboard = types.InlineKeyboardMarkup()\r\n            key_loyal = types.InlineKeyboardButton(text='Лояльный', callback_data='loyal_client')\r\n            key_new = types.InlineKeyboardButton(text='Новый', callback_data='new_client')\r\n            key_negative = types.InlineKeyboardButton(text='Негативный', callback_data='negative_client')\r\n            key_doubting = types.InlineKeyboardButton(text='Сомневающийся', callback_data='doubting_client')\r\n            keyboard.add(key_loyal)\r\n            keyboard.add(key_new)\r\n            keyboard.add(key_negative)\r\n            keyboard.add(key_doubting)\r\n            bot.send_message(message.from_user.id, 'Выберите тип клиента', reply_markup=keyboard)\r\n    elif message.text == \"Следующий вопрос\":\r\n        if b2b_or_b2c == 1:\r\n            for value in cur.execute(\"SELECT * FROM entrance_test_b2b WHERE id=?\", (test_id,)):\r\n                answers = [value[2], value[3], value[4]]\r\n                correct_option = value[5]\r\n                bot.send_poll(chat_id=message.chat.id, question=value[1], options=answers, type='quiz',\r\n                              correct_option_id=value[5], open_period=30, is_anonymous=False)\r\n                test_id += 1\r\n                if test_id == 4:\r\n                    # if test_id == 29:\r\n                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n                    button_next_question = types.KeyboardButton('Выбрать тест')\r\n                    markup.row(button_next_question)\r\n                    bot.send_message(message.from_user.id, 'Нажмите кнопку \"Выбрать тест\", когда будете готовы.',\r\n                                     reply_markup=markup)\r\n        elif b2b_or_b2c == 0:\r\n            for value in cur.execute(\"SELECT * FROM entrance_test_b2c WHERE id=?\", (test_id,)):\r\n                answers = [value[2], value[3], value[4]]\r\n                correct_option = value[5]\r\n                bot.send_poll(chat_id=message.chat.id, question=value[1], options=answers, type='quiz',\r\n                              correct_option_id=value[5], open_period=30, is_anonymous=False)\r\n                test_id += 1\r\n                if test_id == 4:\r\n                    # if test_id == 25:\r\n                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n                    button_next_question = types.KeyboardButton('Выбрать тест')\r\n                    markup.row(button_next_question)\r\n                    bot.send_message(message.from_user.id, 'Нажмите кнопку \"Выбрать тест\", когда будете готовы.',\r\n                                     reply_markup=markup)\r\n        else:\r\n            for value in cur.execute(\"SELECT * FROM main_tests WHERE test_password=? AND question_number=?\",\r\n                                     (test, question_number,)):\r\n                answers = [value[3], value[4], value[5]]\r\n                correct_option = value[6]\r\n                bot.send_poll(chat_id=message.chat.id, question=value[2], options=answers, type='quiz',\r\n                              correct_option_id=value[6], open_period=30, is_anonymous=False)\r\n                question_number += 1\r\n            if question_number == 4:\r\n                bot.send_message(message.from_user.id, 'Тест завершён.',\r\n                                 reply_markup=types.ReplyKeyboardRemove())\r\n    elif message.text == 'Выбрать тест':\r\n        bot.send_message(message.chat.id, \"Вам предстоит выбрать тип клиента и форму коммуникаций\",\r\n                         reply_markup=types.ReplyKeyboardRemove())\r\n        keyboard = types.InlineKeyboardMarkup()\r\n        key_loyal = types.InlineKeyboardButton(text='Лояльный', callback_data='loyal_client')\r\n        key_new = types.InlineKeyboardButton(text='Новый', callback_data='new_client')\r\n        key_negative = types.InlineKeyboardButton(text='Негативный', callback_data='negative_client')\r\n        key_doubting = types.InlineKeyboardButton(text='Сомневающийся', callback_data='doubting_client')\r\n        keyboard.add(key_loyal)\r\n        keyboard.add(key_new)\r\n        keyboard.add(key_negative)\r\n        keyboard.add(key_doubting)\r\n        bot.send_message(message.chat.id, sms2, reply_markup=keyboard)\r\n    else:\r\n        bot.send_message(message.from_user.id, \"Я вас не понимаю. Напишите /help.\")\r\n\r\n\r\n@bot.poll_answer_handler()\r\ndef handle_poll_answer(poll_answer):\r\n    global result, correct_option, test_id, b2b_or_b2c, test, level\r\n    selected_option = poll_answer.option_ids[0]\r\n    if correct_option == selected_option:\r\n        result += 1\r\n    if test_id == 4 and b2b_or_b2c == 0:\r\n        # if test_id == 25 and b2b_or_b2c == 0:\r\n        b2b_or_b2c = 2\r\n        bot.send_message(poll_answer.user.id, f'Вы набрали {result} баллов из 25')\r\n        if 25 >= result >= 23:\r\n            test += 300\r\n            level += 300\r\n            bot.send_message(poll_answer.user.id,\r\n                             'На данный момент ваш уровень - эксперт. Вам будут предложены тесты из этой категории')\r\n        elif 22 >= result >= 20:\r\n            test += 200\r\n            level += 200\r\n            bot.send_message(poll_answer.user.id,\r\n                             'На данный момент ваш уровень - продвинутый. Вам будут предложены тесты из этой категории')\r\n        elif result <= 19:\r\n            test += 100\r\n            level += 100\r\n            bot.send_message(poll_answer.user.id,\r\n                             'На данный момент ваш уровень - новичок. Вам будут предложены тесты из этой категории')\r\n        result = 0\r\n    elif test_id == 4 and b2b_or_b2c == 1:\r\n        # elif test_id == 29 and b2b_or_b2c == 1:\r\n        b2b_or_b2c = 2\r\n        bot.send_message(poll_answer.user.id, f'Вы набрали {result} баллов из 29')\r\n        if 25 >= result >= 23:\r\n            test += 300\r\n            level += 300\r\n            bot.send_message(poll_answer.user.id,\r\n                             'На данный момент ваш уровень - эксперт. Вам будут предложены тесты из этой категории')\r\n        elif 22 >= result >= 20:\r\n            test += 200\r\n            level += 200\r\n            bot.send_message(poll_answer.user.id,\r\n                             'На данный момент ваш уровень - продвинутый. Вам будут предложены тесты из этой категории')\r\n        elif result <= 19:\r\n            test += 100\r\n            level += 100\r\n            bot.send_message(poll_answer.user.id,\r\n                             'На данный момент ваш уровень - новичок. Вам будут предложены тесты из этой категории')\r\n        result = 0\r\n    elif question_number == 4 and b2b_or_b2c == 2:\r\n        b2b_or_b2c = 2\r\n        bot.send_message(poll_answer.user.id, f'Вы набрали {result} баллов из 3')\r\n        result = 0\r\n\r\n\r\n@bot.message_handler(content_types=['web_app_data'])\r\ndef web_app(message: types.Message):\r\n    res = json.loads(message.web_app_data.data)\r\n    first_name = res.get(\"first_name\")\r\n    last_name = res.get(\"last_name\")\r\n    if first_name is not None and last_name is not None:\r\n        bot.send_message(message.from_user.id, f'Имя: {first_name}\\nФамилия: {last_name}',\r\n                         reply_markup=types.ReplyKeyboardRemove())\r\n    else:\r\n        bot.send_message(message.from_user.id, \"Данные отсутствуют\", reply_markup=types.ReplyKeyboardRemove())\r\n\r\n\r\n@bot.callback_query_handler(func=lambda call: True)\r\ndef callback_worker(call):\r\n    global b2b_or_b2c, test, question_number, correct_option, test_id\r\n    if call.data == \"manager\" or \"boss\":\r\n        if call.data == \"manager\":\r\n            bot.send_message(call.from_user.id, \"Вам предстоит выбрать тип продаж. \")\r\n            b2b_msg = \"B2B (Business to Business) – модель, когда клиенты компании – это другие фирмы или предприниматели.\"\r\n            bot.send_message(call.from_user.id, b2b_msg)\r\n            keyboard = types.InlineKeyboardMarkup()\r\n            key_b2b = types.InlineKeyboardButton(text='B2B', callback_data=\"typeofclientb\")\r\n            keyboard.add(key_b2b)\r\n            key_b2c = types.InlineKeyboardButton(text='B2C', callback_data=\"typeofclientc\")\r\n            keyboard.add(key_b2c)\r\n            b2c_msg = \"B2C(Business to Consumer) предполагает продажу товаров,услуг физическим лицам/конечным потребителям.\"\r\n            bot.send_message(call.from_user.id, b2c_msg, reply_markup=keyboard)\r\n        elif call.data == \"boss\":\r\n            bot.send_message(call.message.chat.id, 'Вы можете создать свой тест')\r\n        user_to = call.from_user.id\r\n        info_user_to = cursor.execute(\"SELECT * FROM users WHERE user_id = \" + str(user_to)).fetchall()\r\n        if len(info_user_to) > 0:\r\n            pass\r\n        else:\r\n            us_id = call.from_user.id\r\n            us_name = call.from_user.first_name\r\n            if call.data == \"manager\":\r\n                status = \"manager\"\r\n            else:\r\n                status = \"boss\"\r\n            username = call.from_user.username\r\n            db_table_val1(user_id=us_id, user_name=us_name, user_status=status, username=username)\r\n            if status == 'manager':\r\n                db_table_val2(user_id=us_id, user_status=status, user_boss=0)\r\n                send = bot.send_message(call.message.chat.id, 'Введите id вашего руководителя')\r\n                bot.register_next_step_handler(send, set_boss)\r\n\r\n    if call.data == \"typeofclientb\" or call.data == \"typeofclientc\":\r\n        if call.data == \"typeofclientb\" or call.data == \"typeofclientc\":\r\n            if call.data == \"typeofclientb\":\r\n                test += 1000\r\n                b2b_or_b2c = 1\r\n                sms1 = 'Отлично! Вы выбрали продажи компании/магазину. Пожалуйста пройдите тест для определения уровня.'\r\n                bot.send_message(call.message.chat.id, sms1)\r\n                for value in cur.execute(\"SELECT * FROM entrance_test_b2b\"):\r\n                    answers = [value[2], value[3], value[4]]\r\n                    correct_option = value[5]\r\n                    bot.send_poll(chat_id=call.message.chat.id, question=value[1], options=answers, type='quiz',\r\n                                  correct_option_id=value[5], open_period=30, is_anonymous=False)\r\n                    test_id += 1\r\n                    break\r\n                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n                button_next_question = types.KeyboardButton('Следующий вопрос')\r\n                markup.row(button_next_question)\r\n                bot.send_message(call.message.chat.id,\r\n                                 'Когда будете готовы перейти к следующему вопросу, нажмите кнопку \"Следующий вопрос\" ',\r\n                                 reply_markup=markup)\r\n            else:\r\n                test += 2000\r\n                sms1 = 'Отлично! Вы выбрали продажи частному лицу. Пожалуйста пройдите тест для определения уровня.'\r\n                bot.send_message(call.message.chat.id, sms1)\r\n                for value in cur.execute(\"SELECT * FROM entrance_test_b2c\"):\r\n                    answers = [value[2], value[3], value[4]]\r\n                    correct_option = value[5]\r\n                    bot.send_poll(chat_id=call.message.chat.id, question=value[1], options=answers, type='quiz',\r\n                                  correct_option_id=value[5], open_period=30, is_anonymous=False)\r\n                    test_id += 1\r\n                    break\r\n                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n                button_next_question = types.KeyboardButton('Следующий вопрос')\r\n                markup.row(button_next_question)\r\n                bot.send_message(call.message.chat.id,\r\n                                 'Когда будете готовы перейти к следующему вопросу, нажмите кнопку \"Следующий вопрос\" ',\r\n                                 reply_markup=markup)\r\n    elif call.data == 'loyal_client' or call.data == 'new_client' or call.data == 'negative_client' or call.data == 'doubting_client':\r\n        if call.data == 'loyal_client':\r\n            test += 10\r\n        elif call.data == 'new_client':\r\n            test += 20\r\n        elif call.data == 'negative_client':\r\n            test += 30\r\n        elif call.data == 'doubting_client':\r\n            test += 40\r\n        sms3 = 'Давайте выберем форму коммуникации'\r\n        keyboard = types.InlineKeyboardMarkup()\r\n        key_phone = types.InlineKeyboardButton(text='Телефон', callback_data='phone_communication')\r\n        key_meet = types.InlineKeyboardButton(text='Личная встреча', callback_data='meet_communication')\r\n        key_message = types.InlineKeyboardButton(text='Переписка', callback_data='message_communication')\r\n        keyboard.add(key_phone)\r\n        keyboard.add(key_meet)\r\n        keyboard.add(key_message)\r\n        bot.send_message(call.message.chat.id, sms3, reply_markup=keyboard)\r\n    elif call.data == 'phone_communication' or call.data == 'meet_communication' or call.data == 'message_communication':\r\n        if call.data == 'phone_communication':\r\n            test += 1\r\n        elif call.data == 'meet_communication':\r\n            test += 2\r\n        elif call.data == 'message_communication':\r\n            test += 3\r\n        sms5 = 'Поздравляю! Вы готовы проходить тест. Он будет сгенерирован нашей системой.'\r\n        bot.send_message(call.message.chat.id, sms5)\r\n    if test in [2121, 2122, 2123, 2111, 2112, 2113, 2131, 2132, 2133, 2141, 2142, 2143]:\r\n        for value in cur.execute(\"SELECT * FROM main_tests WHERE test_password=? AND question_number=?\",\r\n                                 (test, question_number,)):\r\n            answers = [value[3], value[4], value[5]]\r\n            correct_option = value[6]\r\n            bot.send_poll(chat_id=call.message.chat.id, question=value[2], options=answers, type='quiz',\r\n                          correct_option_id=value[6], open_period=30, is_anonymous=False)\r\n            question_number += 1\r\n            break\r\n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n        button_next_question = types.KeyboardButton('Следующий вопрос')\r\n        markup.row(button_next_question)\r\n        bot.send_message(call.message.chat.id,\r\n                         'Когда будете готовы перейти к следующему вопросу, нажмите кнопку \"Следующий вопрос\" ',\r\n                         reply_markup=markup)\r\n\r\n\r\ndef set_boss(message):\r\n    msg = message.text\r\n    user_id = message.from_user.id\r\n    string = 'UPDATE boss_to_users SET user_boss = ? WHERE user_id=? '\r\n    cursor.execute(\r\n        string,\r\n        (msg, user_id))\r\n    conn.commit()\r\n\r\n\r\nfrom collections import defaultdict\r\n\r\nuser_id_to_keywords = defaultdict(list)\r\ntest_id_to_numbers = defaultdict(list)\r\ntest_id_to_ans = defaultdict(list)\r\nstates = defaultdict(list)\r\nuser_to_keywords = defaultdict(list)\r\n\r\n\r\n@bot.message_handler()\r\ndef ask_key_word(message):\r\n    keyword = message.text\r\n    user_id = message.from_user.id\r\n    user_to_keywords[user_id] = keyword\r\n    keyword_list = cursor.execute(f\"SELECT * FROM testbase WHERE test_id ='{keyword}'\").fetchall()\r\n    if len(keyword_list) > 0:\r\n        msg = bot.send_message(message.chat.id, 'Такой  пароль для доступа уже существует, придумайте новый')\r\n        bot.register_next_step_handler(msg, ask_key_word)\r\n    else:\r\n        user_id = message.from_user.id\r\n        user_id_to_keywords[user_id].append(keyword)\r\n        msg = bot.send_message(message.chat.id, 'Ваш пароль успешно добавлен.')\r\n        cursor.execute(\r\n            'INSERT INTO testbase (question_number,test_id) VALUES (?, ?)',\r\n            (1, keyword))\r\n        conn.commit()\r\n        msg = bot.send_message(message.chat.id, 'Введите количество вопросов')\r\n        bot.register_next_step_handler(msg, numbers)\r\n\r\n\r\n@bot.message_handler()\r\ndef numbers(message):\r\n    amount = message.text.split()[0]\r\n    user_id = message.from_user.id\r\n    keyword = user_id_to_keywords[user_id][-1]\r\n    while (amount.isdigit() == False):\r\n        send = bot.send_message(message.chat.id, 'Введите число, а не текст')\r\n        bot.register_next_step_handler(send, numbers)\r\n    test_id_to_numbers[keyword].append(amount)\r\n    send = bot.send_message(message.chat.id, 'Введите 1-й вопрос')\r\n    bot.register_next_step_handler(send, read_questions)\r\n\r\n\r\ndef read_questions(message):\r\n    msg = message.text\r\n    user_id = message.from_user.id\r\n    keyword = user_id_to_keywords[user_id][-1]\r\n    amount = int(test_id_to_numbers[keyword][0])\r\n    if len(test_id_to_numbers[keyword]) == 1:\r\n        test_id_to_numbers[keyword].append(1)\r\n    elif len(test_id_to_numbers[keyword]) == 2:\r\n        test_id_to_numbers[keyword].append(2)\r\n        string = 'INSERT INTO testbase (question_number,test_id) VALUES(?,?)'\r\n        cursor.execute(\r\n            string,\r\n            (2, keyword))\r\n        conn.commit()\r\n    elif len(test_id_to_numbers[keyword]) > 2:\r\n        quest_num = int(test_id_to_numbers[keyword][-1]) + 1\r\n        test_id_to_numbers[keyword].append(quest_num)\r\n        string = 'INSERT INTO testbase (question_number,test_id) VALUES(?,?)'\r\n        cursor.execute(\r\n            string,\r\n            (quest_num, keyword))\r\n        conn.commit()\r\n    string = 'UPDATE testbase SET question = ? WHERE test_id=? and question_number=?'\r\n    cursor.execute(\r\n        string,\r\n        (msg, keyword, int(test_id_to_numbers[keyword][-1])))\r\n    conn.commit()\r\n    send = bot.send_message(message.chat.id, f'Введите 1-й вариант ответа')\r\n    bot.register_next_step_handler(send, read_ans)\r\n    states[keyword].append('receiving')\r\n    while (states[keyword][-1] != 'answering'):\r\n        if states[keyword][-1] == 'answering':\r\n            break\r\n    if int(test_id_to_numbers[keyword][-1]) + 1 <= int(test_id_to_numbers[keyword][0]):\r\n        send = bot.send_message(message.chat.id, f'Введите {int(test_id_to_numbers[keyword][-1]) + 1}-й вопрос')\r\n        bot.register_next_step_handler(send, read_questions)\r\n\r\n\r\ndef read_ans(message):\r\n    cnt = 0\r\n    msg = message.text\r\n    amount = msg.split()[0]\r\n    user_id = message.from_user.id\r\n    keyword = user_id_to_keywords[user_id][-1]\r\n    if len(test_id_to_ans[keyword]) != 0:\r\n        if test_id_to_ans[keyword][-1] == 5:\r\n            if amount.isdigit() == False:\r\n                cnt = 1\r\n                msg = bot.send_message(message.chat.id, 'Введите число, а не текст')\r\n                bot.register_next_step_handler(msg, read_ans)\r\n    if cnt == 0:\r\n        if len(test_id_to_ans[keyword]) == 0:\r\n            test_id_to_ans[keyword].append(2)\r\n        else:\r\n            test_id_to_ans[keyword].append(test_id_to_ans[keyword][-1] + 1)\r\n        if test_id_to_ans[keyword][-1] == 6:\r\n            answer = 'right_ans'\r\n        elif test_id_to_ans[keyword][-1] < 6:\r\n            answer = 'ans_' + str(test_id_to_ans[keyword][-1] - 1)\r\n        if len(test_id_to_ans[keyword]) <= 5:\r\n            string = 'UPDATE testbase SET ' + answer + ' = ? WHERE test_id=? and question_number=?'\r\n            cursor.execute(\r\n                string,\r\n                (msg, keyword, int(test_id_to_numbers[keyword][-1])))\r\n            conn.commit()\r\n        if test_id_to_ans[keyword][-1] < 5:\r\n            send = bot.send_message(message.chat.id, f'Введите {int(test_id_to_ans[keyword][-1])}-й вариант ответа')\r\n            bot.register_next_step_handler(send, read_ans)\r\n        if test_id_to_ans[keyword][-1] == 5:\r\n            send = bot.send_message(message.chat.id, f'Введите номер правильного варианта ответа')\r\n            bot.register_next_step_handler(send, read_ans)\r\n        if test_id_to_ans[keyword][-1] == 6:\r\n            test_id_to_ans[keyword].clear()\r\n            states[keyword].append('answering')\r\n\r\n\r\nif __name__ == '__main__':\r\n    set_main_menu()\r\n    bot.polling(none_stop=True, interval=0)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 8b9058e6143e2ff5dbfbde102d461e8f3d2e2647)
+++ b/main.py	(date 1685534089842)
@@ -485,4 +485,4 @@
 
 if __name__ == '__main__':
     set_main_menu()
-    bot.polling(none_stop=True, interval=0)
+    bot.polling(none_stop=True, interval=0)
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (sss)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 8b9058e6143e2ff5dbfbde102d461e8f3d2e2647)
+++ b/.idea/misc.xml	(date 1684935552019)
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (sss)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2f028b91-fee2-488b-b4f2-1dbcbc437b28\" name=\"Changes\" comment=\"addfile\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dataSources.local.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/dataSources.local.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dataSources/35b85669-9436-41dd-a3cb-473ad6584b61.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/dataSources/35b85669-9436-41dd-a3cb-473ad6584b61.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_04_2023,_18_10_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_04_2023,_18_11_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_04_2023__18_10__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_04_2023__18_11__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_04_2023_0_06_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_04_2023_0_06__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_04_2023_18_28_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_04_2023_18_28__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/users.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/users.db\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"new_nastya_branch\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2NHGpO4C09R0GdzZ7ZnzPA4sBZ5\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"project-sales_bot\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2f028b91-fee2-488b-b4f2-1dbcbc437b28\" name=\"Changes\" comment=\"\" />\r\n      <created>1679313775949</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1679313775949</updated>\r\n      <workItem from=\"1679313778301\" duration=\"125000\" />\r\n      <workItem from=\"1679313912623\" duration=\"204000\" />\r\n      <workItem from=\"1679316688088\" duration=\"942000\" />\r\n      <workItem from=\"1679581464301\" duration=\"56000\" />\r\n      <workItem from=\"1679581617170\" duration=\"831000\" />\r\n      <workItem from=\"1679652974196\" duration=\"432000\" />\r\n      <workItem from=\"1679653463756\" duration=\"43000\" />\r\n      <workItem from=\"1679654569738\" duration=\"46000\" />\r\n      <workItem from=\"1679654735686\" duration=\"47000\" />\r\n      <workItem from=\"1679655753330\" duration=\"347000\" />\r\n      <workItem from=\"1679656401714\" duration=\"62000\" />\r\n      <workItem from=\"1679683200572\" duration=\"1293000\" />\r\n      <workItem from=\"1681391633332\" duration=\"6598000\" />\r\n      <workItem from=\"1681828425961\" duration=\"4100000\" />\r\n      <workItem from=\"1682009294321\" duration=\"23000\" />\r\n      <workItem from=\"1682027274436\" duration=\"10384000\" />\r\n      <workItem from=\"1683982500063\" duration=\"5773000\" />\r\n      <workItem from=\"1683988598083\" duration=\"499000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"add file\">\r\n      <created>1679316945896</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679316945896</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"add file\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add file\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/project_sales_bot$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1679582268268\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/sss$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1683988075043\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8b9058e6143e2ff5dbfbde102d461e8f3d2e2647)
+++ b/.idea/workspace.xml	(date 1685470805420)
@@ -4,31 +4,27 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="2f028b91-fee2-488b-b4f2-1dbcbc437b28" name="Changes" comment="addfile">
-      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/dataSources/35b85669-9436-41dd-a3cb-473ad6584b61.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources/35b85669-9436-41dd-a3cb-473ad6584b61.xml" afterDir="false" />
+    <list default="true" id="2f028b91-fee2-488b-b4f2-1dbcbc437b28" name="Changes" comment="add file">
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_04_2023,_18_10_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_04_2023,_18_11_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_04_2023__18_10__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_04_2023__18_11__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_04_2023_0_06_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_04_2023_0_06__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_04_2023_18_28_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_04_2023_18_28__Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/users.db" beforeDir="false" afterPath="$PROJECT_DIR$/users.db" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="HTML File" />
+      </list>
+    </option>
   </component>
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="new_nastya_branch" />
+        <entry key="$PROJECT_DIR$" value="main" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -41,18 +37,16 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
-  }
-}</component>
+  <component name="PropertiesComponent">
+    <property name="DefaultHtmlFileTemplate" value="HTML File" />
+    <property name="com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File" value="HTML" />
+    <property name="settings.editor.selected.configurable" value="preferences.lookFeel" />
+  </component>
+  <component name="RecentsManager">
+    <key name="MoveFile.RECENT_KEYS">
+      <recent name="C:\Users\Таисия\PycharmProjects\project-sales_bot\templates" />
+    </key>
+  </component>
   <component name="RunManager">
     <configuration name="main" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="project-sales_bot" />
@@ -101,8 +95,7 @@
       <workItem from="1681828425961" duration="4100000" />
       <workItem from="1682009294321" duration="23000" />
       <workItem from="1682027274436" duration="10384000" />
-      <workItem from="1683982500063" duration="5773000" />
-      <workItem from="1683988598083" duration="499000" />
+      <workItem from="1682795104264" duration="7038000" />
     </task>
     <task id="LOCAL-00001" summary="add file">
       <created>1679316945896</created>
@@ -111,7 +104,14 @@
       <option name="project" value="LOCAL" />
       <updated>1679316945896</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="add file">
+      <created>1682436600965</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1682436600965</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -132,8 +132,4 @@
     <MESSAGE value="add file" />
     <option name="LAST_COMMIT_MESSAGE" value="add file" />
   </component>
-  <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/project_sales_bot$main.coverage" NAME="main Coverage Results" MODIFIED="1679582268268" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/sss$main.coverage" NAME="main Coverage Results" MODIFIED="1683988075043" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-  </component>
 </project>
\ No newline at end of file
