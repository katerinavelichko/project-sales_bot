Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import telebot\nfrom telebot import types\nfrom telebot.types import BotCommand\nimport sqlite3\n\nbot = telebot.TeleBot('5844570225:AAHVbCClhE53DdtM-RpZ1vKjrPPB4j_I538', 'markdown')\ncon = sqlite3.connect(\"server.db\", check_same_thread=False)\ncur = con.cursor()\nconn = sqlite3.connect('users.db', check_same_thread=False)\ncursor = conn.cursor()\n\n\ndef set_main_menu():\n    main_menu_commands = [\n        BotCommand(command='/start',\n                   description='Запуск бота'),\n        BotCommand(command='/help',\n                   description='Помощь'),\n        BotCommand(command='/addtest',\n                   description='Добавить тест')]\n\n    bot.set_my_commands(main_menu_commands)\n\n\nbot = telebot.TeleBot('5844570225:AAHVbCClhE53DdtM-RpZ1vKjrPPB4j_I538')\ncon = sqlite3.connect(\"server.db\", check_same_thread=False)\ncur = con.cursor()\nconn = sqlite3.connect('users.db', check_same_thread=False)\ncursor = conn.cursor()\n\n\ndef db_table_val(user_id: int, user_name: str, user_status: str, username: str):\n    cursor.execute('INSERT INTO users (user_id, user_name, user_status, username) VALUES (?, ?, ?, ?)',\n                   (user_id, user_name, user_status, username))\n    conn.commit()\n\n\nglobal conclusion\nconclusion = []\n\ntest_id = 2\nb2b_or_b2c = 0\n\n\n@bot.message_handler(content_types=['text'])\ndef get_text_messages(message):\n    global test_id, b2b_or_b2c\n    sms2 = 'Вы можете выбрать один из 4 вариантов: '\n    if message.text == \"/start\":\n        keyboard = types.InlineKeyboardMarkup()\n        key_manager = types.InlineKeyboardButton(text='Менеджер', callback_data=\"manager\")\n        keyboard.add(key_manager)\n        key_boss = types.InlineKeyboardButton(text='Управляющий', callback_data=\"boss\")\n        keyboard.add(key_boss)\n        bot.send_message(message.from_user.id, 'Выберите вашу роль', reply_markup=keyboard)\n    elif message.text == \"/help\":\n        bot.send_message(message.from_user.id, \"Напишите /start\")\n    elif message.text == \"Привет\":\n        bot.send_message(message.from_user.id, \"Здравствуйте! Напишите /help\")\n    elif message.text.lower() == 'добавить тест' or message.text.lower() == '/addtest':\n        send = bot.send_message(message.chat.id,\n                                'Создайте пароль для доступа к вашему тесту, он может состоять только цифр')\n        bot.register_next_step_handler(send, ask_key_word)\n    elif message.text == \"Следующий вопрос\":\n        if b2b_or_b2c == 1:\n            for value in cur.execute(\"SELECT * FROM entrance_test_b2b WHERE id=?\", (test_id,)):\n                answers = [value[2], value[3], value[4]]\n                bot.send_poll(chat_id=message.chat.id, question=value[1], options=answers, type='quiz',\n                              correct_option_id=value[5], explanation='мы молодцы', open_period=30)\n                test_id += 1\n                if test_id == 29:\n                    keyboard = types.InlineKeyboardMarkup()\n                    key_loyal = types.InlineKeyboardButton(text='Лояльный', callback_data='loyal_client')\n                    key_new = types.InlineKeyboardButton(text='Новый', callback_data='new_client')\n                    key_negative = types.InlineKeyboardButton(text='Негативный', callback_data='negative_client')\n                    key_doubting = types.InlineKeyboardButton(text='Сомневающийся', callback_data='doubting_client')\n                    keyboard.add(key_loyal)\n                    keyboard.add(key_new)\n                    keyboard.add(key_negative)\n                    keyboard.add(key_doubting)\n                    bot.send_message(message.chat.id, sms2, reply_markup=keyboard)\n        else:\n            for value in cur.execute(\"SELECT * FROM entrance_test_b2c WHERE id=?\", (test_id,)):\n                answers = [value[2], value[3], value[4]]\n                bot.send_poll(chat_id=message.chat.id, question=value[1], options=answers, type='quiz',\n                              correct_option_id=value[5], explanation='мы молодцы', open_period=30)\n                test_id += 1\n                if test_id == 25:\n                    keyboard = types.InlineKeyboardMarkup()\n                    key_loyal = types.InlineKeyboardButton(text='Лояльный', callback_data='loyal_client')\n                    key_new = types.InlineKeyboardButton(text='Новый', callback_data='new_client')\n                    key_negative = types.InlineKeyboardButton(text='Негативный', callback_data='negative_client')\n                    key_doubting = types.InlineKeyboardButton(text='Сомневающийся', callback_data='doubting_client')\n                    keyboard.add(key_loyal)\n                    keyboard.add(key_new)\n                    keyboard.add(key_negative)\n                    keyboard.add(key_doubting)\n                    bot.send_message(message.chat.id, sms2, reply_markup=keyboard)\n\n    else:\n        bot.send_message(message.from_user.id, \"Я вас не понимаю. Напишите /help.\")\n\n\n@bot.callback_query_handler(func=lambda call: True)\ndef callback_worker(call):\n    global b2b_or_b2c\n    if call.data == \"manager\" or \"boss\":\n        if call.data == \"manager\":\n            bot.send_message(call.from_user.id, \"Вам предстоит выбрать тип продаж. \")\n            b2b_msg = \"B2B (Business to Business) – модель, когда клиенты компании – это другие фирмы или предприниматели.\"\n            bot.send_message(call.from_user.id, b2b_msg)\n            keyboard = types.InlineKeyboardMarkup()\n            key_b2b = types.InlineKeyboardButton(text='B2B', callback_data=\"typeofclientb\")\n            keyboard.add(key_b2b)\n            key_b2c = types.InlineKeyboardButton(text='B2C', callback_data=\"typeofclientc\")\n            keyboard.add(key_b2c)\n            b2c_msg = \"B2C(Business to Consumer) предполагает продажу товаров,услуг физическим лицам/конечным потребителям.\"\n            bot.send_message(call.from_user.id, b2c_msg, reply_markup=keyboard)\n        elif call.data == \"boss\":\n            bot.send_message(call.message.chat.id, 'Вы можете создать свой тест')\n        user_to = call.from_user.id\n        info_user_to = cursor.execute(\"SELECT * FROM users WHERE user_id = \" + str(user_to)).fetchall()\n        if len(info_user_to) > 0:\n            pass\n        else:\n            us_id = call.from_user.id\n            us_name = call.from_user.first_name\n            if call.data == \"manager\":\n                status = \"manager\"\n            else:\n                status = \"boss\"\n            username = call.from_user.username\n            db_table_val(user_id=us_id, user_name=us_name, user_status=status, username=username)\n    if call.data == \"typeofclientb\" or call.data == \"typeofclientc\":\n        if call.data == \"typeofclientb\" or call.data == \"typeofclientc\":\n            if call.data == \"typeofclientb\":\n                b2b_or_b2c = 1\n                sms1 = 'Отлично! Вы выбрали продажи компании/магазину. Пожалуйста пройдите тест для определения уровня.'\n                conclusion.append('b2b')\n                bot.send_message(call.message.chat.id, sms1)\n                for value in cur.execute(\"SELECT * FROM entrance_test_b2b\"):\n                    answers = [value[2], value[3], value[4]]\n                    bot.send_poll(chat_id=call.message.chat.id, question=value[1], options=answers, type='quiz',\n                                  correct_option_id=value[5], explanation='мы молодцы', open_period=30)\n                    break\n                markup = types.ReplyKeyboardMarkup()\n                button_next_question = types.KeyboardButton('Следующий вопрос')\n                markup.row(button_next_question)\n                bot.send_message(call.message.chat.id,\n                                 'Когда будете готовы перейти к следующему вопросу, нажмите кнопку \"Следующий вопрос\" ',\n                                 reply_markup=markup)\n            else:\n                sms1 = 'Отлично! Вы выбрали продажи частному лицу. Пожалуйста пройдите тест для определения уровня.'\n                conclusion.append('b2c')\n                bot.send_message(call.message.chat.id, sms1)\n                for value in cur.execute(\"SELECT * FROM entrance_test_b2c\"):\n                    q = value[1]\n                    ans_1 = value[2]\n                    ans_2 = value[3]\n                    ans_3 = value[4]\n                    answers = [ans_1, ans_2, ans_3]\n                    bot.send_poll(chat_id=call.message.chat.id, question=q, options=answers, type='quiz',\n                                  correct_option_id=value[5], explanation='мы молодцы', open_period=30)\n                    break\n                markup = types.ReplyKeyboardMarkup()\n                button_next_question = types.KeyboardButton('Следующий вопрос')\n                markup.row(button_next_question)\n                bot.send_message(call.message.chat.id,\n                                 'Когда будете готовы перейти к следующему вопросу, нажмите кнопку \"Следующий вопрос\" ',\n                                 reply_markup=markup)\n    elif call.data == 'loyal_client' or call.data == 'new_client' or call.data == 'negative_client' or call.data == 'doubting_client':\n        if call.data == 'loyal_client':\n            conclusion.append('loyal')\n        elif call.data == 'new_client':\n            conclusion.append('new')\n        elif call.data == 'negative_client':\n            conclusion.append('negative')\n        elif call.data == 'doubting_client':\n            conclusion.append('doubting')\n        sms3 = 'Давайте выберем форму коммуникации'\n        keyboard = types.InlineKeyboardMarkup()\n        key_phone = types.InlineKeyboardButton(text='Телефон', callback_data='phone_communication')\n        key_meet = types.InlineKeyboardButton(text='Личная встреча', callback_data='meet_communication')\n        key_message = types.InlineKeyboardButton(text='Переписка', callback_data='message_communication')\n        keyboard.add(key_phone)\n        keyboard.add(key_meet)\n        keyboard.add(key_message)\n        bot.send_message(call.message.chat.id, sms3, reply_markup=keyboard)\n    elif call.data == 'phone_communication' or call.data == 'meet_communication' or call.data == 'message_communication':\n        if call.data == 'phone_communication':\n            conclusion.append('phone')\n        elif call.data == 'meet_communication':\n            conclusion.append('meet')\n        elif call.data == 'message_communication':\n            conclusion.append('message')\n        sms4 = 'Осталось выбрать уровень'\n        keyboard = types.InlineKeyboardMarkup()\n        key_level1 = types.InlineKeyboardButton(text='Новичок', callback_data='level1')\n        key_level2 = types.InlineKeyboardButton(text='Продвинутый', callback_data='level2')\n        key_level3 = types.InlineKeyboardButton(text='Эксперт', callback_data='level3')\n        keyboard.add(key_level1)\n        keyboard.add(key_level2)\n        keyboard.add(key_level3)\n        bot.send_message(call.message.chat.id, sms4, reply_markup=keyboard)\n    elif call.data == 'level1' or call.data == 'level2' or call.data == 'level3':\n        sms5 = 'Поздравляю! Вы готовы проходить тест. Он будет сгенеривован нашей системой.'\n        bot.send_message(call.message.chat.id, sms5)\n\n\nglobal current_state\ncurrent_state = []\nkey_word = {}\n\n\n@bot.message_handler()\ndef ask_key_word(message):\n    msg = message.text\n    msg = \"'\" + msg + \"'\"\n    info_msg = cursor.execute(\"SELECT * FROM testbase WHERE test_id =\" + str(msg)).fetchall()\n    user_to = message.from_user.id\n    key_word[user_to] = []\n    key_word[user_to].append(msg)\n    key_word[user_to].append(info_msg)\n    while len(info_msg) > 0:\n        current_state.append('receiving')\n        send = bot.send_message(message.chat.id, 'Такой  пароль для доступа уже существует, придумайте новый')\n        bot.register_next_step_handler(send, make_key_word)\n        while (current_state[-1] != 'answering'):\n            current_state_str = 'receiving'\n            if current_state[-1] == 'answering':\n                break\n        info_msg = key_word[user_to][1]\n    send = bot.send_message(message.chat.id, 'Ваш пароль успешно добавлен. Введите количество вопросов')\n    bot.register_next_step_handler(send, numbers)\n\n\ndef make_key_word(message):\n    msg = message.text\n    user_to = message.from_user.id\n    msg = \"'\" + msg + \"'\"\n    info_msg = cursor.execute(\"SELECT * FROM testbase WHERE test_id = \" + str(msg)).fetchall()\n    if len(info_msg) == 0:\n        key_word[user_to][0] = msg\n    key_word[user_to].append(info_msg)\n    current_state.append('answering')\n\n\n@bot.message_handler()\ndef numbers(message):\n    global i\n    global j\n    i = 0\n    amount = message.text.split()[0]\n    while (amount.isdigit() == False):\n        current_state.append('receiving')\n        send = bot.send_message(message.chat.id, 'Введите число, а не текст')\n        bot.register_next_step_handler(send, read_number)\n        while (current_state[-1] != 'answering'):\n            current_state_str = 'receiving'\n            if current_state[-1] == 'answering':\n                break\n        amount = current_state[-2]\n    while (i != int(amount)):\n        current_state.append('receiving')\n        send = bot.send_message(message.chat.id, f'Введите {i + 1}-й вопрос')\n        bot.register_next_step_handler(send, questions)\n        while (current_state[-1] != 'answering'):\n            current_state_str = 'receiving'\n            if current_state[-1] == 'answering':\n                break\n        j = 0\n        while (j != 4):\n            current_state.append('receiving')\n            send = bot.send_message(message.chat.id, f'Введите {j + 1}-й вариант ответа')\n            bot.register_next_step_handler(send, answers)\n            while (current_state[-1] != 'answering'):\n                current_state_str = 'receiving'\n                if current_state[-1] == 'answering':\n                    break\n            j += 1\n        current_state.append('receiving')\n        send = bot.send_message(message.chat.id, f'Введите номер правильного ответа')\n        bot.register_next_step_handler(send, answers)\n        while (current_state[-1] != 'answering'):\n            current_state_str = 'receiving'\n            if current_state[-1] == 'answering':\n                break\n        i += 1\n    current_state.clear()\n\n\ndef read_number(message):\n    amount = message.text\n    if amount.isdigit() == True:\n        current_state.append(amount)\n    current_state.append('answering')\n\n\ndef questions(message):\n    last = message.text\n    user_to = message.from_user.id\n    user_to = key_word[user_to][0]\n    user_to = int(user_to[1:-1])\n    add_question(i + 1, last, user_to)\n    current_state.append('answering')\n\n\ndef answers(message):\n    ans = message.text\n    user_to = message.from_user.id\n    user_to = key_word[user_to][0]\n    user_to = int(user_to[1:-1])\n    add_ans(ans, user_to, i + 1, j + 1)\n    current_state.append('answering')\n\n\ndef add_test(question_number, question, ans_1, ans_2, ans_3, ans_4, right_ans, test_id):\n    cursor.execute(\n        'INSERT INTO testbase (question_number, question, ans_1 ,ans_2 ,ans_3,ans_4, right_ans, test_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\n        (question_number, question, ans_1, ans_2, ans_3, ans_4, right_ans, test_id))\n    conn.commit()\n\n\ndef add_question(question_number, question, test_id):\n    cursor.execute(\n        'INSERT INTO testbase (question_number,question, test_id) VALUES (?,?, ?)',\n        (question_number, question, test_id))\n    conn.commit()\n\n\ndef add_ans(ans, test_id, question_number, j_t):\n    if (j_t != 5):\n        answer = 'ans_'\n        answer += str(j_t)\n    else:\n        answer = 'right_ans'\n    string = 'UPDATE testbase SET ' + answer + '= ? WHERE test_id=? and question_number=?'\n    cursor.execute(\n        string,\n        (ans, test_id, question_number))\n    conn.commit()\n\n\nbot.polling(none_stop=True, interval=0)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 5d1e4a326115755cccebd617acbe8e726209d0d9)
+++ b/main.py	(date 1681300999480)
@@ -67,6 +67,11 @@
                 answers = [value[2], value[3], value[4]]
                 bot.send_poll(chat_id=message.chat.id, question=value[1], options=answers, type='quiz',
                               correct_option_id=value[5], explanation='мы молодцы', open_period=30)
+
+                @bot.poll_answer_handler()
+                def handle_poll_answer(message):
+                    # Extract user's chosen option
+                    print(1)
                 test_id += 1
                 if test_id == 29:
                     keyboard = types.InlineKeyboardMarkup()
@@ -101,6 +106,9 @@
         bot.send_message(message.from_user.id, "Я вас не понимаю. Напишите /help.")
 
 
+
+
+
 @bot.callback_query_handler(func=lambda call: True)
 def callback_worker(call):
     global b2b_or_b2c
